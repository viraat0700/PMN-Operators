apiVersion: pmnsystems.pmnsystem.com/v1alpha1
kind: Pmnsystem
metadata:
  labels:
    app.kubernetes.io/name: pmnsystem
    app.kubernetes.io/instance: pmnsystem-sample
    app.kubernetes.io/part-of: pmn-operator-two
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: pmn-operator-two
  name: pmnsystem-sample
spec:
  # TODO(user): Add fields here
  linesToReplace:
    ca.cnf:
      commonName: "notifier-ca.operator.wavelabs.int"
      emailAddress: "viraat.shrivastava@veltris.com"
      subjectAltName: "DNS:notifier-ca.operator.wavelabs.int"
    client.cnf:
      commonName: "notifier-client.operator.wavelabs.int"
      emailAddress: "viraat.shrivastava@veltris.com"
      subjectAltName: "DNS:notifier-client.operator.wavelabs.int"
    server.cnf:
      commonName: "notifier-server.operator.wavelabs.int"
      emailAddress: "viraat.shrivastava@veltris.com"
      subjectAltName: "DNS:notifier-server.operator.wavelabs.int"
  newFileNames:
    ca.crt: "notifier-ca.crt"
    ca.key: "notifier-ca.key"
    client.key: "notifier-client.key"
    client.crt: "notifier-client.crt"
    server.key: "notifier-server.key"
    server.crt: "notifier-server.crt"
  envVariablesPrometheusKafka:
    - name: "KAFKA_BROKER_LIST"
      value: "a7eda74b9c8a841b2935e41ee307e0df-1871632677.us-west-2.elb.amazonaws.com:9094"
    - name: "KAFKA_TOPIC"
      value: "metrics"
    - name: "KAFKA_SECURITY_PROTOCOL"
      value: "sasl_ssl"
    - name: "KAFKA_SASL_MECHANISM"
      value: "PLAIN"
    - name: "KAFKA_SASL_USERNAME"
      value: "admin"
    - name: "KAFKA_SASL_PASSWORD"
      value: "admin-secret"
    - name: "KAFKA_COMPRESSION"
      value: ""
    - name: "KAFKA_BATCH_NUM_MESSAGES"
      value: ""
    - name: "SERIALIZATION_FORMAT"
      value: ""
    - name: "PORT"
      value: "8080"
    - name: "LOG_LEVEL"
      value: ""
    - name: "GIN_MODE"
      value: ""
    - name: "KAFKA_SSL_CLIENT_CERT_FILE"
      value: "/client_cert/adapter-client.crt"
    - name: "KAFKA_SSL_CLIENT_KEY_FILE"
      value: "/client_cert/adapter-client.key"
    - name: "KAFKA_SSL_CA_CERT_FILE"
      value: "/client_cert/adapter-ca.crt"
  envVariablesNMSMagmaLte:
    - name: "API_CERT_FILENAME"
      value: "/run/secrets/admin_operator.pem"
    - name: "API_PRIVATE_KEY_FILENAME"
      value: "/run/secrets/admin_operator.key.pem"
    - name: "API_HOST"
      value: "api.operator.wavelabs.int"
    - name: "HOST"
      value: "0.0.0.0"
    - name: "PORT"
      value: "8081"
    - name: "MYSQL_DB"
      value: "pmndev"
    - name: "MYSQL_HOST"
      value: "postgres.pmn.svc.cluster.local"
    - name: "MYSQL_PORT"
      value: "5432"
    - name: "MYSQL_DIALECT"
      value: "postgres"
    - name: "USER_GRAFANA_ADDRESS"
      value: "orc8r-user-grafana:3000"
  envVariablesNMSMagmaLteDevEnv:
    - name: API_CERT_FILENAME
      value: /run/secrets/admin_operator.pem
    - name: API_PRIVATE_KEY_FILENAME
      value: /run/secrets/admin_operator.key.pem
    - name: API_HOST
      value: api.operator.wavelabs.int
    - name: HOST
      value: "0.0.0.0"
    - name: PORT
      value: "8081"
    - name: MYSQL_DB
      value: postgres
    - name: MYSQL_HOST
      value: postgres.pmn.svc.cluster.local
    - name: MYSQL_PORT
      value: "5432"
    - name: MYSQL_DIALECT
      value: postgres
    - name: USER_GRAFANA_ADDRESS
      value: orc8r-user-grafana:3000
  envVariablesOrc8rNotifier:
    - name: "PUBLISHER_PORT"
      value: "5442"
    - name: "SUBSCRIBER_PORT"
      value: "443"
    - name: "NOTIF_CERT_CA"
      value: "notifier-ca.crt"
    - name: "NOTIF_SERVER_CERT"
      value: "notifier.crt"
    - name: "NOTIF_SERVER_KEY"
      value: "notifier.key"
    - name: "NOTIF_SUBSCRIBER"
      value: "notifier-internal"
    - name: "NOTIF_PUBLISHER"
      value: "notifier-internal"
  envVariablesOrc8rNginx:
    - name: "PROXY_BACKENDS"
      value: "postgres.pmn.svc.cluster.local"
    - name: "CONTROLLER_HOSTNAME"
      value: "controller.operator.wavelabs.int"
    - name: "RESOLVER"
      value: "coredns.kube-system.svc.cluster.local valid=10s"
    - name: "SERVICE_REGISTRY_MODE"
      value: "k8s "
    - name: "SSL_CERTIFICATE"
      value: "/var/opt/magma/certs/controller.crt"
    - name: "SSL_CERTIFICATE_KEY"
      value: "/var/opt/magma/certs/controller.key"
    - name: "SSL_CLIENT_CERTIFICATE"
      value: "/var/opt/magma/certs/certifier.pem"
  envVariablesDirectoryD:
    - name: "SQL_DRIVER"
      value: "postgres"
    - name: "SQL_DIALECT"
      value: "psql"
    - name: "SERVICE_REGISTRY_MODE"
      value: "k8s"
    - name: "HELM_RELEASE_NAME"
      value: "orc8r"
    - name: "SERVICE_REGISTRY_NAMESPACE"
      value: "pmn"
    - name: "HELM_VERSION_TAG"
      value: "1.8.0"
    - name: "VERSION_TAG"
      value: "1.8.0-6c4579b5"
    - name: "ORC8R_DOMAIN_NAME"
      value: "magma.test"
    - name: "PUBLISHER_PORT"
      value: "5442"
    - name: "SUBSCRIBER_PORT"
      value: "443"
    - name: "NOTIF_PUBLISHER"
      value: "notifier-internal"
    - name: "NOTIF_SUBSCRIBER"
      value: "notifier-internal"
  envVariables:
    - name: "SQL_DRIVER"
      value: "postgres"
    - name: "SQL_DIALECT"
      value: "psql"
    - name: "SERVICE_REGISTRY_MODE"
      value: "k8s"
    - name: "HELM_RELEASE_NAME"
      value: "orc8r"
    - name: "SERVICE_REGISTRY_NAMESPACE"
      value: "pmn"
    - name: "HELM_VERSION_TAG"
      value: "1.8.0"
    - name: "VERSION_TAG"
      value: "1.8.0-6c4579b5"
    - name: "ORC8R_DOMAIN_NAME"
      value: "magma.test"
    - name: "PUBLISHER_PORT"
      value: "5442"
    - name: "SUBSCRIBER_PORT"
      value: "443"
    - name: "NOTIF_PUBLISHER"
      value: "notifier-internal"
    - name: "NOTIF_SUBSCRIBER"
      value: "notifier-internal"
    - name: "NOTIF_CERT_CA"
      value: "notifier-ca.crt"
    - name: "NOTIF_SERVER_CERT"
      value: "notifier.crt"
    - name: "NOTIF_SERVER_KEY"
      value: "notifier.key"
  replicaCount: 1
  pullPolicy: IfNotPresent
  nameSpace: "pmn"
  notifierImage: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/notifier:1.8.0-a914c772"
  nginxImage: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/nginx:1.8.0-a914c772"
  imagePullSecrets: "artifactory"
  devEnvironment: true
  cloudEnvironment: false
  certDir: "{{ .Values.certDir }}" ##where call the certificates are stored in the VM
  repoPath: "{{ .Values.repoPath }}" ##Repo which will be used to generate the certificates
  secrets:
    - secretName: "pmn-certs"
      requiredFiles:
        - "controller.crt"
        - "controller.key"
        - "certifier.pem"
        - "certifier.key"
        - "notifier.crt"
        - "notifier.key"
        - "notifier-ca.crt"
        - "admin_operator.pem"
        - "admin_operator.key.pem"
        - "bootstrapper.key"
        - "rootCA.pem"
        - "rootCA.key"
    - secretName: "prometheus-adapter-certs"
      requiredFiles:
        - "adapter-ca.crt"
        - "adapter-client.crt"
        - "adapter-client.key"
    - secretName: "prometheus-certs"
      requiredFiles:
        - "prometheus-ca.crt"
        - "prometheus.crt"
        - "prometheus.key"
    - secretName: "nms-certs"
      requiredFiles:
        - "admin_operator.key.pem"
        - "admin_operator.pem"
        - "controller.crt"
        - "controller.key"
  persistentForStatefulSet:
    pvcClaimName: "abc"
    storageClassName: "nfs"
  persistent:
    pvcClaimName: "promcfg"
    storageClassName: "nfs"
  image:
    repository: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/controller"
    tag: "1.8.0-6c4579b5"
  alertmanagerConfigurer:
    replica: 1
    nodeSelector: {}
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    imageAlertManagerConfigurer:
      repository: "docker.io/facebookincubator/alertmanager-configurer"
      tag: "1.0.4"
      imagePullPolicy: IfNotPresent
    alertManagerConfigPort: 9101
    alertManagerConfPath: "/etc/configs/alertmanager.yml"
    alertmanagerURL: "orc8r-alertmanager:9093"
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "alertmanager-config"
          port: 9101
          protocol: TCP
          targetPort: 9101
  metrics:
    volumes:
      prometheusConfig:
        volumeSpec: ""
  prometheus:
    replicas: 1
  alertManager:
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "alertmanager"
          port: 9093
          protocol: TCP
          targetPort: 9093
    nodeSelector: {}
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    imageAlertmanager:
      repository: "docker.io/prom/alertmanager"
      tag: "v0.18.0"
      imagePullPolicy: "IfNotPresent"
  userGrafana:
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "grafana"
          port: 3000
          protocol: TCP
          targetPort: 3000
    replicas: 1
    nodeSelector: {}
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    imageUserGrafana:
      repository: "docker.io/grafana/grafana"
      tag: "6.6.2"
      imagePullPolicy: "IfNotPresent"
    volumesUserGrafana:
      - name: "grafanadatasources"
        path: "/etc/grafana/provisioning/datasources/"
      - name: "grafanaproviders"
        path: "/etc/grafana/provisioning/dashboards/"
      - name: "grafanadashboards"
        path: "/var/lib/grafana/dashboards"
      - name: "grafanadata"
        path: "/var/lib/grafana"
  prometheusNginxProxy:
    nginx:
      serviceOrc8rSpec:
        type: "LoadBalancer"
        portOrc8rSpec:
          - name: "prometheus-nginx"
            port: 443
            protocol: TCP
            targetPort: 443
            nodePort: 32516
      replicas: 1
      imagePrometheusNginxProxy:
        repository: "nginx"
        tag: "latest"
        imagePullPolicy:
      volumeMountPath:
        mountPath:
          - "/etc/nginx/conf.d/nginx_prometheus_ssl.conf"
          - "/etc/nginx/conf.d/prometheus.crt"
          - "/etc/nginx/conf.d/prometheus.key"
          - "/etc/nginx/conf.d/prometheus-ca.crt"
        subPath:
          - "nginx_prometheus_ssl.conf"
          - "prometheus.crt"
          - "prometheus.key"
          - "prometheus-ca.crt"
      secretName: "prometheus-certs"
  prometheusKafkaAdapter:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imagePrometheusKafkaAdapter:
      repository: "telefonica/prometheus-kafka-adapter"
      tag: "1.9.1"
      imagePullPolicy: "IfNotPresent"
    serviceSpecPrometheusKafkaAdapter:
      type: "ClusterIP"
      portSpecPrometheusKafkaAdapter:
        - name: "http"
          port: 80
          protocol: TCP
          targetPort: "http"
    volumeMountPathPrometheusKafkaAdapter:
      mountPath:
        - "/client_cert"
      secretName: "prometheus-adapter-certs"
  prometheusConfigurer:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imagePrometheusConfigurer:
      repository: "docker.io/facebookincubator/prometheus-configurer"
      tag: "1.0.4"
      imagePullPolicy: "IfNotPresent"
    volume:
      volumeClaimName: "promcfg"
      volumeMountPath: "/etc/configs"
    args:
      - "-port=9100"
      - "-rules-dir=/etc/configs/alert_rules/"
      - "-prometheusURL=orc8r-prometheus:9090"
      - "-multitenant-label=networkID"
      - "-restrict-queries"
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "prom-configmanager"
          port: 9100
          protocol: TCP
          targetPort: 9100
  prometheusCache:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imagePrometheusCache:
      repository: "docker.io/facebookincubator/prometheus-edge-hub"
      tag: "1.1.0"
      imagePullPolicy: "IfNotPresent"
    args:
      - "-limit=500000"
      - "-grpc-port=9092"
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "prometheus-cache"
          port: 9091
          protocol: TCP
          targetPort: 9091
        - name: "prometheus-cache-grpc"
          port: 9092
          protocol: TCP
          targetPort: 9092
  nmsMagmaLte:
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "http"
          port: 8081
          protocol: TCP
          targetPort: 8081
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imageMagmaLte:
      repository: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/magmalte"
      tag: "1.8.0-a914c772"
      imagePullPolicy: "IfNotPresent"
    volumeMountNmsMagmaLte:
      volumeMountPath:
        - "/run/secrets/admin_operator.pem"
        - "/run/secrets/admin_operator.key.pem"
      volumeSubPath:
        - "admin_operator.pem"
        - "admin_operator.key.pem"
    volumesNmsMagmaLte:
      secretName:
        - "nms-certs"
  orc8rNotifier:
    args:
      - "sh"
      - "-c"
      - 'java -jar Orc8rNotificationService-1.0-SNAPSHOT.jar "5442" "443"'
    livenessProbe: 5442
    readinessProbe: 5442
    portDeployment: 443
    serviceSpecOrc8rNotifier:
      type: "LoadBalancer"
      portSpecOrc8rNotifier:
        - name: "notifier"
          port: 4443
          protocol: TCP
          targetPort: 443
          nodePort: 32001
    imageOrc8rNotifier:
      repository: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/notifier"
      tag: "1.8.0-a914c772"
      imagePullPolicy: "IfNotPresent"
  orc8rNginxDeployment:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imageOrc8rNginx:
      repository: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/nginx"
      tag: "1.8.0-a914c772"
      imagePullPolicy: "IfNotPresent"
    volumesOrc8rNginx:
      secretName:
        - "pmn-certs"
        - "pmn-envdir"
    volumesMountPathOrc8rNginx:
      mountPath:
        - "/var/opt/magma/certs"
        - "/var/opt/magma/envdir"
    portOrc8rNginx:
      port:
        - 8443
        - 8444
        - 9443
        - 80

