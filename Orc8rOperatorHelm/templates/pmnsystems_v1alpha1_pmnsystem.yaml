apiVersion: pmnsystems.pmnsystem.com/v1alpha1
kind: Pmnsystem
metadata:
  labels:
    app.kubernetes.io/name: pmnsystem
    app.kubernetes.io/instance: pmnsystem-sample
    app.kubernetes.io/part-of: pmn-operator-two
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: pmn-operator-two
  name: pmnsystem-sample
spec:
  # TODO(user): Add fields here
  linesToReplace: {{- toYaml .Values.linesToReplace | nindent 4 }}
  newFileNames: {{- toYaml .Values.newFileNames | nindent 4 }}
  envVariablesPrometheusKafka: {{ toYaml .Values.envVariablesPrometheusKafka | nindent 2 }}
  envVariablesNMSMagmaLte: {{ toYaml .Values.envVariablesNMSMagmaLte | nindent 2 }}
  envVariablesNMSMagmaLteDevEnv: {{ toYaml .Values.envVariablesNMSMagmaLteDevEnv | nindent 2 }}
  envVariablesOrc8rNotifier: {{ toYaml .Values.envVariablesOrc8rNotifier | nindent 2 }}
  envVariablesOrc8rNginx: {{ toYaml .Values.envVariablesOrc8rNginx | nindent 2 }}
  envVariablesDirectoryD:
    {{ toYaml .Values.envVariablesDirectoryD | nindent 2 }}
  envVariables: {{ toYaml .Values.envVariables | nindent 2 }}
  replicaCount: {{ .Values.replicaCount }}
  pullPolicy: "{{ .Values.pullPolicy }}"
  nameSpace: "{{ .Values.namespace }}"
  notifierImage: "{{ .Values.notifierImage }}"
  nginxImage: "{{ .Values.nginxImage }}"
  imagePullSecrets: "artifactory"
  devEnvironment: {{ .Values.devEnvironment }}
  cloudEnvironment: {{ .Values.cloudEnvironment }}
  certDir: "{{ .Values.certDir }}" ##where call the certificates are stored in the VM
  repoPath: "{{ .Values.repoPath }}" ##Repo which will be used to generate the certificates
  secrets: {{ toYaml .Values.secrets | nindent 2 }}
  persistentForStatefulSet:
    pvcClaimName: "{{ .Values.persistentForStatefulSet.pvcClaimName}}"
    storageClassName: "{{ .Values.persistentForStatefulSet.storageClassName}}"
  persistent:
    pvcClaimName: "{{ .Values.persistent.pvcClaimName }}"
    storageClassName: "{{ .Values.persistent.storageClassName }}"
  image:
    repository: "{{ .Values.image.repository }}"
    tag: "{{ .Values.image.tag }}"
  alertmanagerConfigurer:
    replica: {{ .Values.alertmanagerConfigurer.replica }}
    {{- if .Values.alertmanagerConfigurer.nodeSelector }}
    nodeSelector:
      {{- toYaml .Values.alertmanagerConfigurer.nodeSelector | nindent 6 }}
    {{- end }}
    tolerations:
      {{- toYaml .Values.alertmanagerConfigurer.tolerations | nindent 6 }}
    imageAlertManagerConfigurer:
      repository: "{{ .Values.alertmanagerConfigurer.imageAlertManagerConfigurer.repository }}"
      tag: "{{ .Values.alertmanagerConfigurer.imageAlertManagerConfigurer.tag }}"
      imagePullPolicy: "{{ .Values.alertmanagerConfigurer.imageAlertManagerConfigurer.imagePullPolicy }}"
    alertManagerConfigPort: {{ .Values.alertmanagerConfigurer.alertManagerConfigPort }}
    alertManagerConfPath: "{{ .Values.alertmanagerConfigurer.alertManagerConfPath }}"
    alertmanagerURL: "{{ .Values.alertmanagerConfigurer.alertmanagerURL }}"
    serviceSpec:
      type: "{{ .Values.alertmanagerConfigurer.serviceSpec.type }}"
      portSpec:
        {{- toYaml .Values.alertmanagerConfigurer.serviceSpec.portSpec | nindent 8 }}
  metrics:
    volumes:
      prometheusConfig:
        volumeSpec: "{{ .Values.metrics.volumes.prometheusConfig.volumeSpec }}"
  prometheus:
    replicas: {{ .Values.prometheus.replicas }}
  alertManager:
    serviceSpec:
      type: {{ .Values.alertManager.serviceSpec.type }}
      portSpec:
        {{- range .Values.alertManager.serviceSpec.portSpec }}
        - name: "{{ .name }}"
          port: {{ .port }}
          protocol: "{{ .protocol }}"
          targetPort: {{ .targetPort }}
      {{- end }}
    nodeSelector: {{ toYaml .Values.alertManager.nodeSelector | nindent 6 }}
    tolerations: {{ toYaml .Values.alertManager.tolerations | nindent 6 }}
    imageAlertmanager:
      repository: "{{ .Values.alertManager.imageAlertmanager.repository }}"
      tag: "{{ .Values.alertManager.imageAlertmanager.tag }}"
      imagePullPolicy: "{{ .Values.alertManager.imageAlertmanager.imagePullPolicy }}"
  userGrafana:
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "grafana"
          port: 3000
          protocol: TCP
          targetPort: 3000
    replicas: 1
    nodeSelector: {}
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    imageUserGrafana:
      repository: "docker.io/grafana/grafana"
      tag: "6.6.2"
      imagePullPolicy: "IfNotPresent"
    volumesUserGrafana:
      - name: "grafanadatasources"
        path: "/etc/grafana/provisioning/datasources/"
      - name: "grafanaproviders"
        path: "/etc/grafana/provisioning/dashboards/"
      - name: "grafanadashboards"
        path: "/var/lib/grafana/dashboards"
      - name: "grafanadata"
        path: "/var/lib/grafana"
  prometheusNginxProxy:
    nginx:
      serviceOrc8rSpec:
        type: "LoadBalancer"
        portOrc8rSpec:
          - name: "prometheus-nginx"
            port: 443
            protocol: TCP
            targetPort: 443
            nodePort: 32516
      replicas: 1
      imagePrometheusNginxProxy:
        repository: "nginx"
        tag: "latest"
        imagePullPolicy:
      volumeMountPath:
        mountPath:
          - "/etc/nginx/conf.d/nginx_prometheus_ssl.conf"
          - "/etc/nginx/conf.d/prometheus.crt"
          - "/etc/nginx/conf.d/prometheus.key"
          - "/etc/nginx/conf.d/prometheus-ca.crt"
        subPath:
          - "nginx_prometheus_ssl.conf"
          - "prometheus.crt"
          - "prometheus.key"
          - "prometheus-ca.crt"
      secretName: "prometheus-certs"
  prometheusKafkaAdapter:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imagePrometheusKafkaAdapter:
      repository: "telefonica/prometheus-kafka-adapter"
      tag: "1.9.1"
      imagePullPolicy: "IfNotPresent"
    serviceSpecPrometheusKafkaAdapter:
      type: "ClusterIP"
      portSpecPrometheusKafkaAdapter:
        - name: "http"
          port: 80
          protocol: TCP
          targetPort: "http"
    volumeMountPathPrometheusKafkaAdapter:
      mountPath:
        - "/client_cert"
      secretName: "prometheus-adapter-certs"
  prometheusConfigurer:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imagePrometheusConfigurer:
      repository: "docker.io/facebookincubator/prometheus-configurer"
      tag: "1.0.4"
      imagePullPolicy: "IfNotPresent"
    volume:
      volumeClaimName: "promcfg"
      volumeMountPath: "/etc/configs"
    args:
      - "-port=9100"
      - "-rules-dir=/etc/configs/alert_rules/"
      - "-prometheusURL=orc8r-prometheus:9090"
      - "-multitenant-label=networkID"
      - "-restrict-queries"
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "prom-configmanager"
          port: 9100
          protocol: TCP
          targetPort: 9100
  prometheusCache:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imagePrometheusCache:
      repository: "docker.io/facebookincubator/prometheus-edge-hub"
      tag: "1.1.0"
      imagePullPolicy: "IfNotPresent"
    args:
      - "-limit=500000"
      - "-grpc-port=9092"
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "prometheus-cache"
          port: 9091
          protocol: TCP
          targetPort: 9091
        - name: "prometheus-cache-grpc"
          port: 9092
          protocol: TCP
          targetPort: 9092
  nmsMagmaLte:
    serviceSpec:
      type: "ClusterIP"
      portSpec:
        - name: "http"
          port: 8081
          protocol: TCP
          targetPort: 8081
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imageMagmaLte:
      repository: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/magmalte"
      tag: "1.8.0-a914c772"
      imagePullPolicy: "IfNotPresent"
    volumeMountNmsMagmaLte:
      volumeMountPath:
        - "/run/secrets/admin_operator.pem"
        - "/run/secrets/admin_operator.key.pem"
      volumeSubPath:
        - "admin_operator.pem"
        - "admin_operator.key.pem"
    volumesNmsMagmaLte:
      secretName:
        - "nms-certs"
  orc8rNotifier:
    args:
      - "sh"
      - "-c"
      - 'java -jar Orc8rNotificationService-1.0-SNAPSHOT.jar "5442" "443"'
    livenessProbe: 5442
    readinessProbe: 5442
    portDeployment: 443
    serviceSpecOrc8rNotifier:
      type: "LoadBalancer"
      portSpecOrc8rNotifier:
        - name: "notifier"
          port: 4443
          protocol: TCP
          targetPort: 443
          nodePort: 32001
    imageOrc8rNotifier:
      repository: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/notifier"
      tag: "1.8.0-a914c772"
      imagePullPolicy: "IfNotPresent"
  orc8rNginxDeployment:
    replicas: 1
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    nodeSelector: {}
    imageOrc8rNginx:
      repository: "815281572631.dkr.ecr.us-west-2.amazonaws.com/pmn/dev/nginx"
      tag: "1.8.0-a914c772"
      imagePullPolicy: "IfNotPresent"
    volumesOrc8rNginx:
      secretName:
        - "pmn-certs"
        - "pmn-envdir"
    volumesMountPathOrc8rNginx:
      mountPath:
        - "/var/opt/magma/certs"
        - "/var/opt/magma/envdir"
    portOrc8rNginx:
      port:
        - 8443
        - 8444
        - 9443
        - 80
